// Code generated by MockGen. DO NOT EDIT.
// Source: repository/interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "blog-apis/models"
	reflect "reflect"

	v2 "github.com/gofiber/fiber/v2"
	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreatePost mocks base method.
func (m *MockRepository) CreatePost(c *v2.Ctx, post *models.BlogPost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePost", c, post)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePost indicates an expected call of CreatePost.
func (mr *MockRepositoryMockRecorder) CreatePost(c, post interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePost", reflect.TypeOf((*MockRepository)(nil).CreatePost), c, post)
}

// DeletePost mocks base method.
func (m *MockRepository) DeletePost(c *v2.Ctx, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePost", c, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePost indicates an expected call of DeletePost.
func (mr *MockRepositoryMockRecorder) DeletePost(c, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePost", reflect.TypeOf((*MockRepository)(nil).DeletePost), c, id)
}

// GetBlogPosts mocks base method.
func (m *MockRepository) GetBlogPosts(c *v2.Ctx) ([]models.BlogPost, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlogPosts", c)
	ret0, _ := ret[0].([]models.BlogPost)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlogPosts indicates an expected call of GetBlogPosts.
func (mr *MockRepositoryMockRecorder) GetBlogPosts(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlogPosts", reflect.TypeOf((*MockRepository)(nil).GetBlogPosts), c)
}

// GetPost mocks base method.
func (m *MockRepository) GetPost(c *v2.Ctx, id string) (models.BlogPost, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPost", c, id)
	ret0, _ := ret[0].(models.BlogPost)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPost indicates an expected call of GetPost.
func (mr *MockRepositoryMockRecorder) GetPost(c, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPost", reflect.TypeOf((*MockRepository)(nil).GetPost), c, id)
}

// UpdatePost mocks base method.
func (m *MockRepository) UpdatePost(c *v2.Ctx, id string, post *models.BlogPost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePost", c, id, post)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePost indicates an expected call of UpdatePost.
func (mr *MockRepositoryMockRecorder) UpdatePost(c, id, post interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePost", reflect.TypeOf((*MockRepository)(nil).UpdatePost), c, id, post)
}
